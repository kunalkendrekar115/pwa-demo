{"version":3,"sources":["NewsCard.jsx","LeftDrawer.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","flexGrow","marginTop","media","height","NewsCard","article","title","urlToImage","description","classes","Card","className","CardActionArea","CardMedia","image","CardContent","Typography","gutterBottom","variant","component","color","theme","menuButton","marginRight","spacing","list","width","LeftDrawer","onItemClick","categories","useState","category","setCategory","isDrawerOpen","toggleDrawer","AppBar","position","Toolbar","IconButton","edge","aria-label","onClick","Drawer","open","onClose","List","map","index","ListItem","button","key","ListItemIcon","ListItemText","primary","App","baseURL","apiKey","state","setState","useEffect","isLoading","url","fetch","then","res","json","articles","error","style","display","alignItems","justifyContent","CircularProgress","padding","top","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"uRAUMA,EAAYC,YAAW,CACzBC,KAAM,CACFC,SAAU,EACVC,UAAW,IAEfC,MAAO,CACHC,OAAQ,OAIT,SAASC,EAAT,GAAoE,IAAD,IAA/CC,QAAWC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,YAC/CC,EAAUZ,IAEhB,OACI,kBAACa,EAAA,EAAD,CAAMC,UAAWF,EAAQV,MACrB,kBAACa,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIF,UAAWF,EAAQP,MACnBY,MAAOP,EACPD,MAAOA,IAEX,kBAACS,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAC3Cb,GAEL,kBAACU,EAAA,EAAD,CAAYE,QAAQ,QAAQE,MAAM,gBAAgBD,UAAU,KACvDX,M,yHCrBnBX,EAAYC,aAAW,SAAAuB,GAAK,MAAK,CACnCC,WAAY,CACRC,YAAaF,EAAMG,QAAQ,IAE/BlB,MAAO,CACHN,SAAU,GAEdyB,KAAM,CACFC,MAAO,SAMR,SAASC,EAAT,GAAsC,IAAhBC,EAAe,EAAfA,YAEnBnB,EAAUZ,IAEVgC,EAAa,CAAC,WAAY,gBAAiB,WAAY,UAJrB,EAMRC,mBAASD,EAAW,IANZ,mBAMjCE,EANiC,KAMvBC,EANuB,OAOHF,oBAAS,GAPN,mBAOjCG,EAPiC,KAOnBC,EAPmB,KA8BxC,OACI,oCACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,SACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQ5B,UAAWF,EAAQa,WAAYF,MAAM,UAAUoB,aAAW,OAC/EC,QAAS,kBAAMP,GAAa,KAC5B,kBAAC,IAAD,OAEJ,kBAAClB,EAAA,EAAD,CAAYE,QAAQ,KAAKP,UAAWF,EAAQH,OACvCyB,KAIb,kBAACW,EAAA,EAAD,CAAQC,KAAMV,EAAcW,QAAS,kBAAMV,GAAa,KAhC5D,yBACIvB,UAAWF,EAAQgB,MACnB,kBAACoB,EAAA,EAAD,KACKhB,EAAWiB,KAAI,SAACf,EAAUgB,GAAX,OACZ,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAKnB,EAClBU,QAAS,WACLT,EAAYD,GACZH,EAAsB,IAAVmB,EAAchB,EAAW,IACrCG,GAAa,KAEjB,kBAACiB,EAAA,EAAD,KAAeJ,EAAQ,IAAM,EAAI,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OACjD,kBAACK,EAAA,EAAD,CAAcC,QAAStB,Y,YCFhCuB,MA3Cf,WAEE,IAAMC,EAAU,iDACVC,EAAS,mCAHF,EAKa1B,mBAAS,CAAEC,SAAU,KALlC,mBAKN0B,EALM,KAKCC,EALD,KAML3B,EAAa0B,EAAb1B,SAER4B,qBAAU,WAERD,EAAS,eAAKD,EAAN,CAAaG,WAAW,KAChC,IAAMC,EAAM9B,EAAQ,UAAMwB,EAAN,qBAA0BxB,EAA1B,mBAA6CyB,GAA7C,UACbD,EADa,mBACKC,GAEzBM,MAAMD,GACHE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,YAAmB,IAAhBG,EAAe,EAAfA,SACPR,EAAS,eAAKD,EAAN,CAAaG,WAAW,EAAOM,iBACtC,SAACC,GACFT,EAAS,eAAKD,EAAN,CAAaG,WAAW,EAAOO,gBAE1C,CAACpC,IArBS,IAuBLmC,EAAwBT,EAAxBS,SAAUN,EAAcH,EAAdG,UAClB,OACE,yBAAKQ,MAAO,CACVC,QAAS,OAAQlE,OAAQ,QACzBmE,WAAY,SAAUC,eAAgB,WAEtC,kBAAC5C,EAAD,CACEC,YAAa,SAACG,GAAD,OAAc2B,EAAS,CAAE3B,gBACvC6B,GAAa,kBAACY,EAAA,EAAD,MACd,yBAAKJ,MAAO,CACVhC,SAAU,WACVqC,QAAS,GAAIC,IAAK,KAEjBR,GAAYA,EAASpB,KAAI,SAACzC,EAAS0C,GAAV,OAAqB,kBAAC3C,EAAD,CAAU8C,IAAG,UAAKH,GAAS1C,QAASA,UC9BvEsE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.8110cffc.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        flexGrow: 1,\r\n        marginTop: 16\r\n    },\r\n    media: {\r\n        height: 220,\r\n    },\r\n});\r\n\r\nexport function NewsCard({ article: { title, urlToImage, description } }) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardActionArea>\r\n                <CardMedia\r\n                    className={classes.media}\r\n                    image={urlToImage}\r\n                    title={title}\r\n                />\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        {title}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {description}\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n        </Card>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    list: {\r\n        width: 250,\r\n    }\r\n}));\r\n\r\n\r\n\r\nexport function LeftDrawer({ onItemClick }) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const categories = ['Top News', 'Entertainment', 'Business', 'Sports']\r\n\r\n    const [category, setCategory] = useState(categories[0])\r\n    const [isDrawerOpen, toggleDrawer] = useState(false)\r\n\r\n\r\n    const sideList = () => (\r\n        <div\r\n            className={classes.list}>\r\n            <List>\r\n                {categories.map((category, index) => (\r\n                    <ListItem button key={category}\r\n                        onClick={() => {\r\n                            setCategory(category)\r\n                            onItemClick(index !== 0 ? category : '')\r\n                            toggleDrawer(false)\r\n                        }}>\r\n                        <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                        <ListItemText primary={category} />\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\"\r\n                        onClick={() => toggleDrawer(true)}>\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        {category}\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer open={isDrawerOpen} onClose={() => toggleDrawer(false)}>\r\n                {sideList()}\r\n            </Drawer>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NewsCard } from './NewsCard';\r\nimport { LeftDrawer } from './LeftDrawer';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n\r\nfunction App() {\r\n\r\n  const baseURL = 'http://newsapi.org/v2/top-headlines?country=in'\r\n  const apiKey = 'dfcd91fa823d419c81a1cdbbf7f0f68a'\r\n\r\n  const [state, setState] = useState({ category: '' })\r\n  const { category } = state\r\n\r\n  useEffect(() => {\r\n   \r\n    setState({ ...state, isLoading: true })\r\n    const url = category ? `${baseURL}&category=${category}&apiKey=${apiKey}`\r\n      : `${baseURL}&apiKey=${apiKey}`\r\n\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(({ articles }) => {\r\n        setState({ ...state, isLoading: false, articles })\r\n      }, (error) => {\r\n        setState({ ...state, isLoading: false, error })\r\n      })\r\n  }, [category])\r\n\r\n  const { articles, isLoading } = state\r\n  return (\r\n    <div style={{\r\n      display: 'flex', height: '100vh',\r\n      alignItems: 'center', justifyContent: 'center'\r\n    }}>\r\n      <LeftDrawer\r\n        onItemClick={(category) => setState({ category })} />\r\n      {isLoading && <CircularProgress />}\r\n      <div style={{\r\n        position: 'absolute',\r\n        padding: 16, top: 40\r\n      }}>\r\n        {articles && articles.map((article, index) => (<NewsCard key={`${index}`} article={article} />))}\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n //serviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}